AWSTemplateFormatVersion: '2010-09-09'
Description: Creates an S3 bucket and CloudFormation configured for hosting a static website

Parameters:
  BucketName:
    Type: String
    Description: The name for the bucket hosting your website, e.g. 'datamanager-yourname'
  SecretsTableName:
    Type: String
    Default: ADFSSecretData
    Description: The secrets table in DynamoDB, e.g. 'ADFSSecretData'
  ListSecretDataFunctionName:
    Type: String
    Default: ListSecretData
    Description: Lambda function name to list secret data in DynamoDB, e.g. 'ListSecretData'
  DataManagerName:
    Type: String
    Default: DataManager
    Description: ApiGateway data manager name, e.g. 'DataManager'
  SecretDataPolicy:
    Type: String
    Default: SecretDataPolicy
    Description: IAM policy name, e.g. 'SecretDataPolicy'

Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
    DeletionPolicy: Retain

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'WebsiteBucket'
      PolicyDocument:
        Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource: !Join ['', ['arn:aws:s3:::', !Ref 'WebsiteBucket', /*]]

  WebsiteCloudfront:
    Type: AWS::CloudFront::Distribution
    DependsOn:
    - WebsiteBucket
    Properties:
      DistributionConfig:
        Comment: Cloudfront Distribution pointing to S3 bucket
        Origins:
        - DomainName: !Select [2, !Split ["/", !GetAtt WebsiteBucket.WebsiteURL]]
          Id: S3Origin
          CustomOriginConfig:
            HTTPPort: '80'
            HTTPSPort: '443'
            OriginProtocolPolicy: http-only
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          Compress: true
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All

  SecretsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref SecretsTableName
      AttributeDefinitions:
        -
          AttributeName: email
          AttributeType: S
      KeySchema:
        -
          AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  RequestSecretDataExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: SecretDataLambda
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        -
          PolicyName: !Ref SecretDataPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource: !GetAtt SecretsTable.Arn

  RequestSecretDataFunction:
     Type: AWS::Lambda::Function
     Properties:
       FunctionName: !Ref ListSecretDataFunctionName
       Runtime: nodejs6.10
       Role: !GetAtt RequestSecretDataExecutionRole.Arn
       Timeout: 5
       MemorySize: 128
       Environment:
        Variables:
          TABLE_NAME: !Ref SecretsTableName
       Handler: index.handler
       Code:
         ZipFile: >
            const AWS = require('aws-sdk');

            const ddb = new AWS.DynamoDB.DocumentClient();

            var tableName = process.env.TABLE_NAME;

            exports.handler = (event, context, callback) => {
                if (!event.requestContext.authorizer) {
                  errorResponse('Authorization not configured', context.awsRequestId, callback);
                  return;
                }

                console.log('Received event: ', event);

                listSecrets(event.requestContext.authorizer.claims.email).then((data) => {
                    // You can use the callback function to provide a return value from your Node.js
                    // Lambda functions. The first parameter is used for failed invocations. The
                    // second parameter specifies the result data of the invocation.

                    // Because this Lambda function is called by an API Gateway proxy integration
                    // the result object must use the following structure.
                    callback(null, {
                        statusCode: 200,
                        body: JSON.stringify(data.Items),
                        headers: {
                            'Access-Control-Allow-Origin': '*',
                        },
                    });
                }).catch((err) => {
                    console.error(err);

                    // If there is an error during processing, catch it and return
                    // from the Lambda function successfully. Specify a 500 HTTP status
                    // code and provide an error message in the body. This will provide a
                    // more meaningful error response to the end client.
                    errorResponse(err.message, context.awsRequestId, callback)
                });
            };

            function listSecrets(username) {
                return ddb.scan({
                    ExpressionAttributeValues: {
                        ":u": username
                    },
                    FilterExpression: 'email = :u',
                    TableName: tableName,
                }).promise();
            }

            function errorResponse(errorMessage, awsRequestId, callback) {
              callback(null, {
                statusCode: 500,
                body: JSON.stringify({
                  Error: errorMessage,
                  Reference: awsRequestId,
                }),
                headers: {
                  'Access-Control-Allow-Origin': '*',
                },
              });
            }

  DataManagerApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref DataManagerName
      Body:
        swagger: 2.0
        info:
          version: 1.0.0
          title: !Ref DataManagerName
        paths:
          /secrets:
            get:
              description: Requests data for a user
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt RequestSecretDataFunction.Arn
                      - "/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"

  DataManagerApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Prod deployment for Data Manager API
      RestApiId: !Ref DataManagerApi
      StageName: prod

  DataManagerFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RequestSecretDataFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref DataManagerApi
            - "/*"

Outputs:
  BucketName:
    Value: !Ref 'WebsiteBucket'
    Description: Name of S3 bucket to hold website content
  CloudfrontEndpoint:
    Value: !GetAtt [WebsiteCloudfront, DomainName]
    Description: Endpoint for Cloudfront distribution
  DataManagerApiInvokeUrl:
    Description: URL for the deployed Data Manager API
    Value:
      Fn::Join:
        - ""
        - - "https://"
          - !Ref DataManagerApi
          - ".execute-api."
          - !Ref AWS::Region
          - ".amazonaws.com/prod"
    #Export:
    #  Name: DataManagerApiUrl
